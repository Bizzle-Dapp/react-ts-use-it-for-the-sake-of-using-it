[{"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\index.tsx":"1","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\App.tsx":"2","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\LandingPage.tsx":"3","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\NavBar.tsx":"4","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\TimeOnApp.tsx":"5","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\index.ts":"6","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\enums\\index.ts":"7","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\enums\\pageTypes.ts":"8"},{"size":513,"mtime":1611759299817,"results":"9","hashOfConfig":"10"},{"size":1703,"mtime":1611783155779,"results":"11","hashOfConfig":"10"},{"size":534,"mtime":1611781835079,"results":"12","hashOfConfig":"10"},{"size":819,"mtime":1611783199723,"results":"13","hashOfConfig":"10"},{"size":750,"mtime":1611782554149,"results":"14","hashOfConfig":"10"},{"size":196,"mtime":1611782970674,"results":"15","hashOfConfig":"10"},{"size":65,"mtime":1611783155770,"results":"16","hashOfConfig":"10"},{"size":83,"mtime":1611783155770,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ctd5nh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\index.tsx",[],["37","38"],"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\App.tsx",["39"],"import React, { useEffect, useRef, useState } from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n// Indexed export file for components to reduce import declarations. For the sake of it.\nimport { NavBar, LandingPage, TimeOnApp } from './components/index';\n// Indexed export file for enums to reduce import declarations. For the sake of it.\nimport { pageTypes } from './enums/index';\nimport './styles/App.css';\n\n\n\nfunction App() {\n  const [timeOnApp, setTimeOnApp] = useState<number>(0);\n  const timeRef = useRef(0)\n  \n  // Use a continous looping useEffect to creating a timer for how long someone has been on the app ..\n  // .. in seconds. We then assign this to a ref which is continously updated and thus able to be used .. \n  // .. as state which does not trigger a rerender.\n  let timer: any;\n  useEffect(() => {\n      timer = setInterval(() => {\n        setTimeOnApp(timeOnApp + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  })\n\n  // UseEffect that triggers on change of timeOnApp state. This will mean our reference to the timer .. \n  // .. will always be 1 second behind. Not sure if it's beneficial, could just pass the state, but .. \n  // .. then the rule is use it for the sake of using it. So we have.\n  useEffect(() => {\n    timeRef.current = timeOnApp;\n  }, [timeOnApp])\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route path={pageTypes.timeOnApp}>\n            <TimeOnApp timeRef={timeRef}/>\n          </Route>\n          <Route path={pageTypes.landingPage}>\n            <LandingPage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n    \n  );\n}\n\nexport default App;\n","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\LandingPage.tsx",["40","41"],"import React, {useState} from 'react';\r\nimport '../styles/App.css';\r\n\r\n\r\n\r\nexport const LandingPage: React.FC = () => {\r\n    const [imageOnPage, setImageOnPage] = useState<string>()\r\n    \r\n\r\n\r\n    return(\r\n    <>\r\n        <h1>Home</h1>\r\n        <p>\r\n            Welcome to the interactive playground. This application has been designed to act as a central point for just simply\r\n            using tools <i>for the sake of using them</i>. A point of reference on how something has previously been done.\r\n        </p>\r\n    </>\r\n    )\r\n}","D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\NavBar.tsx",[],"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\TimeOnApp.tsx",[],"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\components\\index.ts",[],"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\enums\\index.ts",[],"D:\\My_Projects\\react-ts-use-it-for-the-sake-of-using-it\\src\\enums\\pageTypes.ts",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":20,"column":15,"nodeType":"48","endLine":22,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":7,"column":12,"nodeType":"51","messageId":"52","endLine":7,"endColumn":23},{"ruleId":"49","severity":1,"message":"53","line":7,"column":25,"nodeType":"51","messageId":"52","endLine":7,"endColumn":39},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","Assignments to the 'timer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","@typescript-eslint/no-unused-vars","'imageOnPage' is assigned a value but never used.","Identifier","unusedVar","'setImageOnPage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]